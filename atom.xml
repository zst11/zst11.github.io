<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-03T18:15:26.138Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker-blog</title>
    <link href="http://example.com/2023/10/31/docker-blog/"/>
    <id>http://example.com/2023/10/31/docker-blog/</id>
    <published>2023-10-31T12:17:52.000Z</published>
    <updated>2023-11-03T18:15:26.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><blockquote><p>弱小和无知不是生存得障碍，傲慢才是  —-《三体》</p></blockquote><blockquote><p>只要学不死，就往死里学！！！</p></blockquote><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p>Java —- jar（环境）—– 打包项目带上环境（镜像）—– Docker仓库（商店）—— 别人下载发布得镜像直接运行即可</p><p>思想来自于集装箱！</p><p>核心思想：隔离！</p><p>文档地址：<a class="link" href="https://docs.docker.com/">Docker Docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h3><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231031211601853.png" alt="image-20231031211601853"></p><p><strong>镜像</strong>（image）：通过镜像创建容器服务（run命令），可以创建多个容器，容器之间相互隔离，最终得服务或者项目是运行在容器之中的</p><p><strong>容器</strong>（container）：基本命令，启动、停止、删除</p><p><strong>仓库</strong>（repository）：存放镜像</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、购买云服务器</p><p>2、卸载旧docker</p><p>3、安装docker</p><h2 id="docker原理与命令"><a href="#docker原理与命令" class="headerlink" title="docker原理与命令"></a>docker原理与命令</h2><p>相当于是一个cs架构</p><p>镜像命令</p><ul><li>docker pull  下载镜像</li><li>docker run   运行镜像</li><li>docker rmi -f   [镜像id]  等等  删除镜像</li></ul><p>容器命令</p><p>docker run 【参数】 image  </p><p>–name &#x3D; “name”</p><p>-d   后台方式运行</p><p>-it  以交互式运行，进入容器查看内容    &#x2F;bin&#x2F;bash (后面这个加入到最后，是进入控制台命令)   ； 进入之后容器就是镜像id</p><p>-p  指定容器端口  可以映射主机端口   主机端口：容器端口</p><p>-P  随机端口</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231103100035818.png" alt="image-20231103100035818"></p><p>docker ps 【参数】 查看容器</p><p>退出容器 ： </p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器停止并退出</span><br><span class="line">Ctrl + P + Q # 退出不停止</span><br></pre></td></tr></table></figure></div><p>删除容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f 容器id # 不能移除正在运行得容器，加上-f就可以</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231103101741457.png" alt="image-20231103101741457"></p><p>启动容器</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id</span><br><span class="line">restart 重启</span><br><span class="line">stop 关闭</span><br></pre></td></tr></table></figure></div><p>后台启动容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 容器id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果容器中没有应用，会自动立刻停止</span></span><br></pre></td></tr></table></figure></div><p>进入容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec 容器id  /bin/bash # 方式一，进入容器之后会进去一个新的终端，可以进行命令操作</span><br><span class="line"></span><br><span class="line">docker attach 容器id  # 方式二，进入容器里正在执行得终端，不会开启新的终端</span><br></pre></td></tr></table></figure></div><p>日志</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104004943088.png" alt="image-20231104004943088"></p><p>写一段shell 脚本后台运行，通过日志查看</p><p>查看进程 <strong>pid才是进程号</strong></p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104005157855.png" alt="image-20231104005157855"></p><p>查看镜像元数据</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104010214583.png" alt="image-20231104010214583"></p><p>从容器中拷贝文件到虚拟机主机上（反过来是用数据卷挂载）</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104011436357.png" alt="image-20231104011436357"></p><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><p>部署nginx</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104012545957.png" alt="image-20231104012545957"></p><p>通过-p 来暴露Linux的端口让我可以通过这个端口访问到容器内的nginx（默认80端口）</p><p>注意这个端口Linux防火墙是否已开（我好像关闭了防火墙），阿里云服务器安全组是否已开</p><p>进入容器</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/31/docker-blog/image-20231104015320699.png" alt="image-20231104015320699"></p><p><strong>但每次修改配置文件都要进入容器内部，十分麻烦，后面可以在容器外部提供一个映射路径，修改外部容器内部就可以修改了，使用 -v数据卷技术</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-学习&quot;&gt;&lt;a href=&quot;#Docker-学习&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习&quot;&gt;&lt;/a&gt;Docker 学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存得障碍，傲慢才是  —-《三体》&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java中intern、new String（）会创建几个对象</title>
    <link href="http://example.com/2023/10/19/Java-itern-blog/"/>
    <id>http://example.com/2023/10/19/Java-itern-blog/</id>
    <published>2023-10-19T14:50:38.000Z</published>
    <updated>2023-10-20T11:22:20.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近研究了一些关于intern的用法,在这做个笔记</p></blockquote><h1 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h1><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><ul><li><p>jdk1.7及以下存在于永久代_方法区中,jdk1.8以后存在元空间方法区中</p></li><li><p>运行时常量池的包装类<strong>Byte,Short,Integer,Long,Character,Boolean。这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据</strong>,在使用时可以直接使用超过之后就会创建新对象</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line">   <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">   <span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">   System.out.println(c == d); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div></li></ul><h2 id="字符串常量池移动"><a href="#字符串常量池移动" class="headerlink" title="字符串常量池移动"></a>字符串常量池移动</h2><ul><li>在JDK1.6及之前，字符串常量池是属于运行时常量池的</li><li>JDK1.7以后，字符串常量池被拿出来放到了堆中</li></ul><h2 id="字符串怎样从堆中移动到字符串常量池"><a href="#字符串怎样从堆中移动到字符串常量池" class="headerlink" title="字符串怎样从堆中移动到字符串常量池"></a>字符串怎样从堆中移动到字符串常量池</h2><ul><li>通过 <strong>String a &#x3D; new String(“hello”)</strong>;这种方式所创建得字符串会现在堆中存储一份，如果字符串常量池中没有，会在其中也创建一份，但最终返回得引用是堆中得引用</li><li>String a &#x3D; “hello” 将会看常量池中是否有这个对象有就返回引用，没有就在堆中创建再返回其引用</li></ul><h2 id="使用intern方法"><a href="#使用intern方法" class="headerlink" title="使用intern方法"></a>使用intern方法</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hell0&quot;</span>;</span><br><span class="line">a == c ;<span class="comment">// false;</span></span><br><span class="line">b == c ;<span class="comment">// true;</span></span><br></pre></td></tr></table></figure></div><p>这样会将其在字符串常量池中得引用传给b</p><h2 id="会创建几个对象分析"><a href="#会创建几个对象分析" class="headerlink" title="会创建几个对象分析"></a>会创建几个对象分析</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>); </span><br></pre></td></tr></table></figure></div><p>看其在字符串常量池中有无存在，没有就创建两个、有就只会创建一个；</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>) + <span class="string">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>假设字符串常量池中没有存在:</p><p>​将会创建5个对象</p><ul><li>new 会创建两个</li><li>world会创建一个</li><li>加号会创建一个StringBuilder 之后 再toString所以会创建两个</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近研究了一些关于intern的用法,在这做个笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;常量池&quot;&gt;&lt;a href=&quot;#常量池&quot; class=&quot;headerlink&quot; title=&quot;常量池&quot;&gt;&lt;/a&gt;常量池&lt;/h1&gt;&lt;h2 id=&quot;运</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>物联网环境监测系统</title>
    <link href="http://example.com/2023/10/16/first-Java-blog/"/>
    <id>http://example.com/2023/10/16/first-Java-blog/</id>
    <published>2023-10-16T14:34:16.000Z</published>
    <updated>2023-10-21T16:53:57.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，作为个人第一次写得博客如若不足希望大家能够指出，接下来就开始开心得创作吧</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p><strong>项目源码地址：<a class="link" href="https://github.com/zst11/Caigou.git">https://github.com/zst11/Caigou.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p><ul><li>这是我第一次写得Java项目所以就没有使用SSM框架和web方面，也是比较可惜，就是单纯了得使用了maven和JDBC以及各种jar包</li><li>本项目是根据物联网技术，通过<strong>传感器</strong>对农棚内农作物得参数变化，例如：光照强度、湿度等，经由网关，发送给数据中心，并进行数据的分析和处理；对于此项目本篇文章就重点描述了客户端数据中心的数据操作之后将数据发给服务端，服务端对数据进行的入库操作，至于拿到了数据该如何分析数据不在本项目的范畴之内</li></ul><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>在数据中心模块中，收到的数据已经进行了简单的预处理，数据的形式为：</p><blockquote><p>100|101|2|16|1|3|57a491fc02|1|1516413763738</p><p>100|101|2|16|1|3|57a891fc02|1|1516413764761</p><p>100|101|2|16|1|3|57a491fc02|1|1516413765686</p><p>100|101|2|256|1|3|001c03|1|1516413766708</p><p>100|101|2|256|1|3|001c03|1|1516413767731</p><p>100|101|2|16|1|3|57a492d002|1|1516413768756</p><p>100|101|2|1280|1|3|02f801|1|1516413769787</p><p>100|101|2|1280|1|3|02f801|1|1516413770702</p><p>….</p></blockquote><p>一行数据作为一组数据，每个数据使用**|**进行分割，每行数据代表一种数据环境，其分为以下九个小部分：</p><p>1、发送端id</p><p>2、树莓派系统id</p><p>3、实验箱区域模块id(1-8)</p><p>4、模块上传感器地址</p><ul><li>16，表示温度和湿度数据</li><li>256，表示光照强度数据</li><li>1280，表示二氧化碳数据</li></ul><p>5、传感器个数</p><p>6、指令标号</p><p>​如果是3表示需要接受数据，如果是16表示需要发送数据</p><p>7、<strong>环境数据</strong></p><p>8、状态标识</p><p>​默认为1，表示成功</p><p>9、采集时间</p><p>我们并不需要把目光放在这些id上，这不是此项目重点，只是一个标识</p><p><strong>特别注意，关于一行中的第7个数据部分</strong></p><p>这部分是真正的环境数据，但是使用的十六进制表示，需要转换为十进制，分三种情况：</p><ul><li><p>如果当前是温度和湿度的数据，则前两个字节是温度，中间两个字节是湿度，剩余字节不用管</p></li><li><p>如果当前是光照强度的数据，则前两个字节就是数据值，剩余字节不用管</p></li><li><p>如果当前是二氧化碳的数据，则前两个字节就是数据值，剩余字节不用管</p></li></ul><blockquote><p><strong>ps</strong>：一个字节是由2个十六进制表示的；第6个数据不需要关心，因为此项目是接收数据进行分析的</p><p>所以全都是3</p></blockquote><h1 id="模块关系"><a href="#模块关系" class="headerlink" title="模块关系"></a>模块关系</h1><p>总共进行三个模块的切分，分别为公共模块、客户端模块、服务端模块</p><p>公共模块：</p><ul><li>配置模块，负责初始化和配置其他模块（使用dom4j解析xml配置文件）</li><li>日志模块，记录系统得运行情况，并且使用其来替代传统得输出（需要使用log4j记录日志信息）</li><li>备份模块，负责在需要得时候对数据进行备份，并且在需要得时候获得之前备份得数据</li></ul><p>客户端：</p><ul><li>采集模块，负责采集预处理好得文件中得数据</li><li>网络模块，负责连接服务器端，并采集得数据发送过去</li></ul><p>服务端（使用了多线程进行实现）：</p><ul><li>入库模块，负责将数据存入数据库</li><li>网络模块，负责等待客户端得连接，并接收发送得数据</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1、此项目使用了SVN来进行版本控制</p><img lazyload src="/images/loading.svg" data-src="image-20231017230325405.png" alt="image-20231017230325405" style="zoom:67%;"><p>其中仓库名为env_project，里面有三个部分，分别为：</p><ul><li>trunk：项目主干，进行分支得合并</li><li>trg：标签，记录比较重要得版本</li><li>branches：分支，不同用户可以进行分支拉取进行读取</li></ul><p>2、使用maven进行项目构建</p><p><img lazyload src="/images/loading.svg" data-src="/2023/10/16/first-Java-blog/image-20231018214238254.png" alt="image-20231018214238254"></p><p>其中得ui模块为自己想要看得一个临时界面使用GUI进行简单搭建</p><h2 id="项目编写"><a href="#项目编写" class="headerlink" title="项目编写"></a>项目编写</h2><h3 id="采集模块"><a href="#采集模块" class="headerlink" title="采集模块"></a>采集模块</h3><p>新建GatherImpl 来实现common模块中得Gather接口</p><p>实现逻辑：</p><ul><li><p>暂时先使用<strong>缓冲流</strong>来读取文件中得数据，之后在使用备份模块之后使用<strong>随机流</strong>进行读取</p></li><li><p>读取到得数据使用 “|”进行分割，用Environment集合进行接收</p></li><li><p>对于接收到得数据进行数据格式得转换，之后根据<strong>环境数据</strong>来进行<strong>name</strong>得判断、温湿度得切分</p></li><li><p>根据第四行得数据判断此行数据属于什么类别</p></li><li><p>将环境数据进行转换得<strong>公式</strong></p><ul><li><p>v1代表数据的前两个字节（0，4）16进制转10进制的int值，v2代表数据的中间两个字节（4，8）16进制转10</p><p>进制的int值</p></li><li><p>温度：(float)(v1 * 0.00268127-46.85)；湿度：(float)(v2*0.00190735-6)</p></li><li><p>⼆氧化碳浓度和光照强度直接是前两个字节的16进制转10进制即可</p></li></ul></li></ul><p><strong>ps</strong>：如果判断出这行数据属于温湿度得类别，那这条数据就需要被拆成两条</p><h3 id="网络模块（TCP）"><a href="#网络模块（TCP）" class="headerlink" title="网络模块（TCP）"></a>网络模块（TCP）</h3><p>1、客户端</p><p>​将采集得到得数据发送给客户端</p><ul><li>获得服务器ip和端口</li><li>调用对象输出流将数据发送到socket中，记住需实现序列化接口</li><li>调用writeObejct</li></ul><p>2、服务端</p><p>​接收客户端发送得数据</p><ul><li><p>使用多线程编写</p></li><li><p>调用readObject获得object类型得数据</p></li><li><p>将数据安全转换为list</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ins = socket.getInputStream();</span><br><span class="line">ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(ins);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">Collection&lt;Environment&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// LinkedList ?</span></span><br><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> Collection&lt;?&gt;)&#123;</span><br><span class="line">    Collection&lt;?&gt; l = (Collection&lt;?&gt;) object;</span><br><span class="line">    <span class="keyword">for</span> (Object o:l)&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Environment)&#123;</span><br><span class="line">            list.add((Environment) o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="入库模块"><a href="#入库模块" class="headerlink" title="入库模块"></a>入库模块</h3><p>1、准备工作</p><ul><li><p>因为接收到得数据是一个月中每一天信息，所以我们可以在Navicat中使用存储过程建立31张表，实现如下（MySQL表是</p><p>存储在虚拟机中得）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">create database envir;</span><br><span class="line">create user &#x27;envir&#x27;@&#x27;%&#x27; identified by &#x27;envir&#x27;;</span><br><span class="line">grant all on envir.* to &#x27;envir&#x27;@&#x27;%&#x27;;</span><br><span class="line">-- set names utf8;</span><br><span class="line">use envir;</span><br><span class="line">-- 使用存储过程建表</span><br><span class="line">DROP PROCEDURE IF EXISTS create_table_do;</span><br><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE create_table_do()</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">WHILE i &lt; 32 DO</span><br><span class="line">SET @STMT = CONCAT(&quot;DROP TABLE IF EXISTS `env_detail_&quot;,i,&quot;`;&quot;);</span><br><span class="line">PREPARE STMT FROM @STMT; </span><br><span class="line">EXECUTE STMT;</span><br><span class="line">SET @STMT = CONCAT(&quot;CREATE TABLE IF NOT EXISTS `env_detail_&quot;,i,</span><br><span class="line">&quot;`(`name` varchar(20) NOT NULL COMMENT &#x27;传感器名称&#x27;,</span><br><span class="line">`srcId` varchar(5) NOT NULL COMMENT &#x27;发送端id&#x27;,</span><br><span class="line">`desId` varchar(5) NOT NULL COMMENT &#x27;树莓派系统id&#x27;,</span><br><span class="line">`devId` char(1) NOT NULL COMMENT &#x27;实验箱区域模块id&#x27;,</span><br><span class="line">`sensorAddress` varchar(7) NOT NULL COMMENT &#x27;模块上传感器地址&#x27;,</span><br><span class="line">`count` int(2) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;传感器个数&#x27;,</span><br><span class="line">`cmd`  varchar(5) NOT NULL  DEFAULT &#x27;3&#x27; COMMENT &#x27;指令标号(3表示需要接受数据  16表示需要发送数据)&#x27;,</span><br><span class="line">`status` int(2) NOT NULL DEFAULT &#x27;1&#x27;  COMMENT &#x27;状态标示(默认为1表示成功)&#x27;,</span><br><span class="line">`data` float(9,4) NOT NULL COMMENT &#x27;采集的数据&#x27;,</span><br><span class="line">`gather_date` timestamp NOT NULL COMMENT &#x27;采集时间&#x27;)ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT=&#x27;数据详情日表&#x27;;&quot;</span><br><span class="line">);</span><br><span class="line">PREPARE STMT FROM @STMT; </span><br><span class="line">EXECUTE STMT;</span><br><span class="line">    SET i = i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">END//</span><br><span class="line">CALL create_table_do();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li><li><p>JDBC的实现封装封装了工具类在util下，在Java与数据库连接时使用数据库连接池Druid</p></li></ul><p>2、实现逻辑</p><ul><li><p>遍历从客户端拿到的集合</p></li><li><p>处理集合中的gatherDate，因为其是TimeStamp类型，使用Calender类获取到天数，根据天数插入到不同的表中</p></li><li><p>使用prepareStatement预处理</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;insert into env_detail_&quot;+day+&quot; values(?,?,?,?,?,?,?,?,?,?)&quot;;</span><br></pre></td></tr></table></figure></div></li><li><p>在使用这种方式创建对象时进行优化只有当天数发生改变时才创建新的pst</p></li><li><p>使用批处理得方式进行提交</p></li></ul><h3 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h3><p>使用日志输出来替代System输出</p><p>1、日志的作用</p><ul><li>日志有不同的等级，可以做出不同的响应</li><li>日志可以输出到文件夹以方便我们查看错误信息</li></ul><p>2、实现逻辑</p><ul><li><p>对log4j的配置文件进行完成（具体log4j怎样使用可以自行百度）</p></li><li><p>定义log接口，实现log接口，实现方法是直接掉API进行实现</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String msg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String msg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">warn</span><span class="params">(String msg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String msg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fatal</span><span class="params">(String msg)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>将原先使用System输出的位置改为日志输出</p></li></ul><h3 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h3><p>首先我们需先了解配置模块得作用：</p><p>1、通过配置模块产生其他模块对象，就不用模块中再持有各自实例，将项目进行解耦</p><p>2、当我们需要从配置文件中获取到需要得信息时，可以直接使用配置模块获得</p><p>实现过程：</p><p>1、在实现之前我们先来了解一个概念，回调（callback）</p><p>回调就是我们并不知道此处具体要实现什么，然后正常进行调用，然后当我们各自具体项目实现这个方法时对其各自实现</p><p>此次项目中就定义了两个接口用来定义回调函数</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于实现某个模块需要另一个模块得支持时，创建该模块</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurationAware</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可通过参数configuration的getXxx()方法获取需要的模块的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration Configuration接口的实现类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setConfiguration</span><span class="params">(Configuration configuration)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于实现我们在需要到配置文件中得信息时，通过重写init从properties中拿到信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PropertiesAware</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对当前模块进行初始化赋值，变量值从properties中获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 存储了配置信息(例如ip、端口号)的Properties对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Properties properties)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>2、创建Configuration配置接口并实现（ConfigurationImpl）他</p><p>​接口中有实现各个模块得抽象方法</p><p>3、ConfigurationImpl的实现</p><ul><li><p>创建map对象来接收key 标签名 value 权限类名，然后就可以在重写的抽象方法中通过map.get()来获取到不同模块</p></li><li><p>创建properties对象来接收配置信息</p></li><li><p>使用dom4j通过SAXReader来对xml文件进行解析</p></li><li><p>对于解析到elements，对于其是模块名还是配置信息将其放到map或者properties中</p></li><li><p>最后，判断不同的类是否实现了PropertiesAware或者ConfigurationAware接口来进行相应的回调；判断接口是否实现了二者使用instanceof进行判断（instanceof 可以判断类 和 接口）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> PropertiesAware)&#123;</span><br><span class="line">                <span class="type">PropertiesAware</span> <span class="variable">p</span> <span class="operator">=</span> (PropertiesAware) v;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    p.init(properties);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> ConfigurationAware)&#123;</span><br><span class="line">                <span class="type">ConfigurationAware</span> <span class="variable">c</span> <span class="operator">=</span> (ConfigurationAware) v;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.setConfiguration(<span class="built_in">this</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="备份模块"><a href="#备份模块" class="headerlink" title="备份模块"></a>备份模块</h3><p>备份模块最初在此项目设计的时候是并不存在得，而之所以在后来设计这一模块是为了对项目整体做出一个优化，使其可以不用读取重复得数据</p><p>实现过程：</p><ul><li><p>创建Backup接口，其中有两个抽象方法</p><ul><li>load（）：调用load可以实现读取到上一次所备份得数据</li><li>store（）：使用store可以将最新得数据进行备份</li></ul><blockquote><p><strong>ps</strong>:我们所备份或者读取到得其实是最后指针所指到得位置</p></blockquote></li><li><p>使用备份模块，获取到上一次备份的数据也就是指针位置和新数据的指针位置进行对比，如若指针位置增加了我们就行数据的采集</p></li><li><p>我们在使用到备份模块之后，就会将数据流的读取方式从缓冲流改变到随机流，这样我们在得到指针位置改变了，就使用随机流中的seek（）方法跳转到上一次备份数据指针的位置，直接从这位置进行数据的采集</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为自己的第一个Java项目，但是也不能称之为项目吧，然后一个人完成了这些也觉得挺不错得，接下来就让我们期待下面的项目吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先，作为个人第一次写得博客如若不足希望大家能够指出，接下来就开始开心得创作吧&lt;/p&gt;
&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目</summary>
      
    
    
    
    
    <category term="Java_Project01" scheme="http://example.com/tags/Java-Project01/"/>
    
  </entry>
  
</feed>
